#!/bin/bash
#
# ci/scripts/create-release-and-deploy
#
# Script for generating Github release / tag assets
# and managing release notes for a BOSH Release pipeline
#
# author:  James Hunt <james@niftylogic.com>
# created: 2016-03-30

header() {
	echo
	echo "###############################################"
	echo
	echo $*
	echo
}

curl https://s3.amazonaws.com/bosh-cli-artifacts/bosh-cli-2.0.17-linux-amd64 -o /usr/bin/bosh2
chmod +x /usr/bin/bosh2

header "Setting up bosh2 config..."
export BOSH_ENVIRONMENT=${BOSH_ENVIRONMENT:?required}
export BOSH_CA_CERT=${BOSH_CA_CERT:?required}
export BOSH_CLIENT=${BOSH_CLIENT:?required}
export BOSH_CLIENT_SECRET=${BOSH_CLIENT_SECRET:?required}
export BOSH_DEPLOYMENT=${BOSH_DEPLOYMENT:?required}

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

header "Importing image into release..."
cp image/image-id     ${REPO_ROOT}/src/image-cache/
cp image/repository   ${REPO_ROOT}/src/image-cache/
cp image/tag          ${REPO_ROOT}/src/image-cache/
gzip -c image/image > ${REPO_ROOT}/src/image-cache/image.tgz

set -e
cd ${REPO_ROOT}
header "Pulling in any git submodules..."
git submodule update --init --recursive --force

header "Cleaning up from any previous deployments..."
bosh2 -n delete-deployment ${BOSH_LITE_DEPLOYMENT} --force || echo "continuing on..."

header "Creating candidate BOSH release..."
bosh2 -n create-release
bosh2 -n upload-release --rebase || echo "Continuing..."

header "Deploying to ${BOSH_LITE_TARGET}..."
mkdir -p tmp
cat > tmp/name.yml <<YAML
---
- type: replace
  path: /name
  value: ${BOSH_DEPLOYMENT:?required}
YAML

bosh2 -n deploy manifests/docker-broker.yml \
  -o manifests/operators/dingo-redis.yml \
	--vars-store tmp/creds.yml \
	-o manifests/operators/dingo-redis-image-tag.yml \
	-v dingo-redis-image-tag=edge \
	-o manifests/operators/dev.yml \
	-o tmp/name.yml

if [[ -n ${TEST_ERRANDS} ]]; then
	for errand in ${TEST_ERRANDS}; do
		header "Running '${errand}' errand"
		bosh2 -n run-errand ${errand}
	done
fi

header "Deploying with SHIELD integration..."

# need to ensure shield defaults are in shield-daemon; or set them?
# daily, shortterm - only create if missing

cat > tmp/shield-deployment.yml <<YAML
---
- type: replace
  path: /instance_groups/name=docker/jobs/name=cf-containers-shield-link/consumes/shield-daemon/deployment
  value: ${SHIELD_DEPLOYMENT}
YAML

bosh2 -n deploy manifests/docker-broker.yml \
  -o manifests/operators/dingo-redis.yml \
	--vars-store tmp/creds.yml \
	-o manifests/operators/dingo-redis-image-tag.yml \
	-v dingo-redis-image-tag=edge \
	-o manifests/operators/dev.yml \
	-o tmp/name.yml \
	-o manifests/operators/shield-linked.yml \
	-o tmp/shield-deployment.yml || (
		$DIR/show-deploy-logs
		exit 1
	)

if [[ -n ${TEST_ERRANDS} ]]; then
	for errand in ${TEST_ERRANDS}; do
		header "Running '${errand}' errand"
		bosh2 -n run-errand ${errand}
	done
fi

header "Cleaning up..."
bosh2 -n delete-deployment ${BOSH_LITE_DEPLOYMENT} --force || echo "continuing on..."
bosh2 -n clean-up || echo "continuing on..."

echo
echo "SUCCESS"
exit 0
