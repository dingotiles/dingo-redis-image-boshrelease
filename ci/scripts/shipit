#!/bin/bash
#
# ci/scripts/shipit
#
# Script for generating Github release / tag assets
# and managing release notes for a BOSH Release pipeline
#
# author:  James Hunt <james@niftylogic.com>
# created: 2016-03-30

set -eu

header() {
	echo
	echo "###############################################"
	echo
	echo $*
	echo
}

: ${REPO_ROOT:?required}
: ${RELEASE_ROOT:?required}
: ${REPO_OUT:?required}
: ${BRANCH:?required}
: ${GITHUB_OWNER:?required}
: ${VERSION_FROM:?required}
if [[ ! -f ${VERSION_FROM} ]]; then
  echo >&2 "Version file (${VERSION_FROM}) not found.  Did you misconfigure Concourse?"
  exit 2
fi
VERSION=$(cat ${VERSION_FROM})
if [[ -z ${VERSION} ]]; then
  echo >&2 "Version file (${VERSION_FROM}) was empty.  Did you misconfigure Concourse?"
  exit 2
fi

if [[ ! -f ${REPO_ROOT}/ci/release_notes.md ]]; then
  echo >&2 "ci/release_notes.md not found.  Did you forget to write them?"
  exit 1
fi

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

###############################################################

header "Setting up bosh2 config..."
export BOSH_ENVIRONMENT=${BOSH_ENVIRONMENT:?required}
export BOSH_CA_CERT=${BOSH_CA_CERT:?required}
export BOSH_CLIENT=${BOSH_CLIENT:?required}
export BOSH_CLIENT_SECRET=${BOSH_CLIENT_SECRET:?required}


header "Importing image into release..."
cp image/image-id     ${REPO_ROOT}/src/image-cache/
cp image/repository   ${REPO_ROOT}/src/image-cache/
cp image/tag          ${REPO_ROOT}/src/image-cache/
gzip -c image/image > ${REPO_ROOT}/src/image-cache/image.tgz

(
cd ${REPO_ROOT}
RELEASE_NAME=$(bosh2 int config/final.yml --path /final_name)

cat > config/private.yml << EOF
---
blobstore:
  provider: s3
  options:
    access_key_id: ${AWS_ACCESS_KEY:?required}
    secret_access_key: ${AWS_SECRET_KEY:?required}
EOF

header "Pulling in any git submodules..."
git submodule update --init --recursive --force

header "Create final release..."
bosh2 -n create-release --final --version "${VERSION}"
bosh2 -n create-release releases/$RELEASE_NAME/$RELEASE_NAME-$VERSION.yml \
              --tarball releases/$RELEASE_NAME/$RELEASE_NAME-$VERSION.tgz

RELEASE_TGZ=$PWD/releases/$RELEASE_NAME/$RELEASE_NAME-$VERSION.tgz
SHA1=$(sha1sum $RELEASE_TGZ | head -n1 | awk '{print $1}')
)

mkdir -p ${RELEASE_ROOT}/artifacts
echo "v${VERSION}"                         > ${RELEASE_ROOT}/tag
echo "v${VERSION}"                         > ${RELEASE_ROOT}/name
cp ${REPO_ROOT}/releases/*/*-${VERSION}.tgz  ${RELEASE_ROOT}/artifacts
mv ${REPO_ROOT}/ci/release_notes.md          ${RELEASE_ROOT}/notes.md
cat >> ${RELEASE_ROOT}/notes.md <<EOF

### Deployment
\`\`\`yaml
releases:
- name: $RELEASE_NAME
  version: $VERSION
	url: https://github.com/${GITHUB_OWNER}/${RELEASE_NAME}-boshrelease/releases/download/v${VERSION}/${RELEASE_NAME}-${VERSION}.tgz
	sha1: $SHA1
\`\`\`
EOF
cat > ${RELEASE_ROOT}/notification <<EOF
<!here> New ${RELEASE_NAME} v${VERSION} released!
EOF


header "Update git repo with final release..."
if [[ -z $(git config --global user.email) ]]; then
  git config --global user.email "ci@starkandwayne.com"
fi
if [[ -z $(git config --global user.name) ]]; then
  git config --global user.name "CI Bot"
fi

(cd ${REPO_ROOT}
 $DIR/update-manifest $GITHUB_OWNER $RELEASE_NAME $VERSION $SHA1
 git merge --no-edit ${BRANCH}
 git add -A
 git status
 git commit -m "release v${VERSION}")

# so that future steps in the pipeline can push our changes
cp -a ${REPO_ROOT} ${REPO_OUT}
