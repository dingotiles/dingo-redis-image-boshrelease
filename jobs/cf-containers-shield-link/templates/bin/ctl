#!/bin/bash

set -e # exit immediately if a simple command exits with a non-zero status
set -u # report the usage of uninitialized variables

# Setup env vars and folders for the webapp_ctl script
source /var/vcap/jobs/cf-containers-shield-link/helpers/ctl_setup.sh 'cf-containers-shield-link'

export LANG=en_US.UTF-8

case $1 in

  start)
    pid_guard $PIDFILE $JOB_NAME

    # store pid in $PIDFILE
    echo $$ > $PIDFILE

    <%
      unless daemon_url = p("shield-daemon.endpoint", nil)
        daemon = link("shield-daemon")
        domain = daemon.p("domain", daemon.instances.first.address)
        daemon_url = "https://#{domain}"
      end
      unless api_key   = p('shield-daemon.provisioning_key', nil)
        api_key = link("shield-daemon").p("auth.api_keys").values.first
      end
      schedule = p('backups.schedule.name')
      policy   = p('backups.retention-policy.name')
      store    = p('backups.store.name')
    -%>
    SHIELD_CONFIG=$(mktemp --tmpdir auto.XXXXXX)
    trap "rm -rf ${SHIELD_CONFIG}" INT TERM QUIT EXIT

    export SHIELD_API_TOKEN=<%= api_key %>
    export SHIELD_SKIP_SSL_VERIFY=true

    # Create a specific  config file for shield-agent stuff, to avoid race
    # conditions in case we are colocated with shield-daemon.
    shield -c ${SHIELD_CONFIG} create-backend default <%= daemon_url %>

    store_uuid=$(   shield stores    --raw | jq -r ".[] | select(.name == \"<%= store %>\")| .uuid // \"\"")
    schedule_uuid=$(shield schedules --raw | jq -r ".[] | select(.name == \"<%= schedule %>\")| .uuid // \"\"")
    policy_uuid=$(  shield policies  --raw | jq -r ".[] | select(.name == \"<%= policy %>\")| .uuid // \"\"")
    errors=no
    if [[ "${store_uuid:-X}" == "X" ]]; then
      echo "ERROR: requested SHIELD store '<%= store %>' does not exist."
      errors=yes
    fi
    if [[ "${schedule_uuid:-X}" == "X" ]]; then
      echo "ERROR: requested SHIELD store '<%= schedule %>' does not exist."
      errors=yes
    fi
    if [[ "${policy_uuid:-X}" == "X" ]]; then
      echo "ERROR: requested SHIELD store '<%= policy %>' does not exist."
      errors=yes
    fi
    if [[ "${errors}" == "yes" ]]; then
      exit 1
    fi

    mkdir -p /var/vcap/store/cf-containers-broker/envdir
    cd /var/vcap/store/cf-containers-broker/envdir
    echo "<%= daemon_url %>"  > SHIELD_ENDPOINT
    echo "<%= api_key %>"     > SHIELD_PROVISIONING_KEY
    echo "<%= api_key %>"     > SHIELD_API_TOKEN
    echo "true"               > SHIELD_SKIP_SSL_VERIFY
    echo "<%= schedule %>"    > SHIELD_BACKUPS_SCHEDULE
    echo "<%= policy %>"      > SHIELD_BACKUPS_RETENTION
    echo "<%= policy %>"      > SHIELD_BACKUPS_RETENTION_POLICY
    echo "<%= policy %>"      > SHIELD_BACKUPS_POLICY
    echo "<%= store %>"       > SHIELD_BACKUPS_STORE

    echo "<%= spec.address %>" > DOCKER_HOST_IP

    tail -f /dev/null

    ;;

  stop)
    kill_and_wait $PIDFILE

    ;;
  *)
    echo "Usage: ctl {start|stop}"

    ;;

esac
exit 0
